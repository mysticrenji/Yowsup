--- /usr/local/lib/python2.7/dist-packages/yowsup2-2.5.2-py2.7.egg/yowsup/layers/protocol_media/protocolentities/message_media_downloadable.py.orig	2017-04-23 11:18:03.877652000 +0200
+++ /usr/local/lib/python2.7/dist-packages/yowsup2-2.5.2-py2.7.egg/yowsup/layers/protocol_media/protocolentities/message_media_downloadable.py	2017-09-09 23:54:19.163215310 +0200
@@ -34,6 +34,8 @@
         out += "IP: %s\n" % self.ip
         out += "File Size: %s\n" % self.size
         out += "File name: %s\n" % self.fileName
+        print (out)
+
         return out
 
     def getMediaSize(self):
@@ -56,18 +58,23 @@
 
     def toProtocolTreeNode(self):
         node = super(DownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()
-        mediaNode = node.getChild("media")
+        mediaNode = node.getChild("enc")
         mediaNode.setAttribute("mimetype",  self.mimeType)
         mediaNode.setAttribute("filehash",  self.fileHash)
-        mediaNode.setAttribute("url",       self.url)
+        mediaNode.setAttribute("url",       self.url["url"].encode())
         if self.ip:
             mediaNode.setAttribute("ip",        self.ip)
         mediaNode.setAttribute("size",      str(self.size))
         mediaNode.setAttribute("file",      self.fileName)
-        if self.mediaKey:
-            mediaNode.setAttribute("mediakey", self.mediaKey)
-
+        mediaNode.setAttribute("mediakey", self.url["mediaKey"])
+        mediaNode.setAttribute("anu", self.url["mediaKey"])
+        mediaNode.setAttribute("file_enc_sha256", self.url["file_enc_sha256"])
+        print ("mediakey:" + str(self.url["mediaKey"]))
+        print ("mimetype:" + self.mimeType)
+        print ("filehash:" + self.fileHash)
+        print ("file_enc_sha256:" + self.url["file_enc_sha256"])
         return node
+        # return node
 
     def isEncrypted(self):
         return self.mediaKey is not None
@@ -93,8 +100,17 @@
         url = builder.get("url")
         ip = builder.get("ip")
         assert url, "Url is required"
-        mimeType = builder.get("mimetype", MimeTools.getMIME(builder.getOriginalFilepath())[0])
-        filehash = WATools.getFileHashForUpload(builder.getFilepath())
+        mimeType = builder.get("mimetype", MimeTools.getMIME(builder.getOriginalFilepath()))
+        filehash = WATools.getFileHashForUpload2(builder.getFilepath())
         size = os.path.getsize(builder.getFilepath())
         fileName = os.path.basename(builder.getFilepath())
         return DownloadableMediaMessageProtocolEntity(builder.mediaType, mimeType, filehash, url, ip, size, fileName, to = builder.jid, preview = builder.get("preview"))
+
+    @staticmethod
+    def fromFilePath(fpath, url, mediaType, ip, to, mimeType = None, preview = None, filehash = None, filesize = None):
+        mimeType = mimeType or MimeTools.getMIME(fpath)
+        filehash = filehash or WATools.getFileHashForUpload(fpath)
+        size = filesize or os.path.getsize(fpath)
+        fileName = os.path.basename(fpath)
+
+        return DownloadableMediaMessageProtocolEntity(mediaType, mimeType, filehash, url, ip, size, fileName, to = to, preview = preview)
